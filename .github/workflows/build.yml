name: Build

on:
  push:
    branches:
      - master
    paths:
      - 'gmcl-runtime/**'
      - 'gmcl-runtime-api/**'
      - 'gmcl-keystone-ui/**'
      - 'gmcl-electron-app/**'
      - 'gmcl/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: pnpm/action-setup@v2.0.1
      with:
        version: 7.13.2
    - name: Use Node.js 16
      uses: actions/setup-node@v2
      with:
        node-version: 16
        cache: 'pnpm'
    - name: Install
      run: pnpm install
    - name: Build
      run: |
        pnpm run --prefix gmcl-keystone-ui build
        pnpm run --prefix gmcl-electron-app build:all
      env:
        BUILD_NUMBER: ${{ env.GITHUB_RUN_NUMBER }}
        NODE_ENV: production
    - name: Upload Build
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: |
          gmcl-electron-app/build/output/*.*
          gmcl-electron-app/build/output/nsis-web/*.*
    - name: Upload Zip Build
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-zip
        path: |
          gmcl-electron-app/build/output/*.zip
    - name: Prepare Windows Asar
      if: ${{ runner.os == 'Windows' && startsWith(github.event.head_commit.message, 'chore(release)') }} 
      run: |
        mkdir asar
        mv gmcl-electron-app/build/output/win-unpacked/resources/app.asar asar/app-win.asar
        mv gmcl-electron-app/build/output/win-unpacked/resources/app.asar.sha256 asar/app-win.asar.sha256
    - name: Prepare macOS Asar
      if: ${{ runner.os == 'macOS' && startsWith(github.event.head_commit.message, 'chore(release)') }} 
      run: |
        mkdir asar
        mv "gmcl-electron-app/build/output/mac/Gerda Minecraft Launcher.app/Contents/Resources/app.asar" asar/app-mac.asar
        mv "gmcl-electron-app/build/output/mac/Gerda Minecraft Launcher.app/Contents/Resources/app.asar.sha256" asar/app-mac.asar.sha256
    - name: Prepare Linux Asar
      if: ${{ runner.os == 'Linux' && startsWith(github.event.head_commit.message, 'chore(release)') }} 
      run: |
        mkdir asar
        mv gmcl-electron-app/build/output/linux-unpacked/resources/app.asar asar/app-linux.asar
        mv gmcl-electron-app/build/output/linux-unpacked/resources/app.asar.sha256 asar/app-linux.asar.sha256
    - name: Upload Asar
      if: ${{ startsWith(github.event.head_commit.message, 'chore(release)') }} 
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: |
          asar/*.*
  build-appx:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: pnpm/action-setup@v2.0.1
      with:
        version: 6.24.4
    - name: Use Node.js 16
      uses: actions/setup-node@v2
      with:
        node-version: 16
        cache: 'pnpm'
    - name: Install
      run: pnpm install
    - name: Build
      run: |
        pnpm run --prefix gmcl-keystone-ui build
        pnpm run --prefix gmcl-electron-app build
      env:
        BUILD_NUMBER: ${{ env.GITHUB_RUN_NUMBER }}
        NODE_ENV: production
        BUILD_TARGET: appx
    - name: Upload Build
      uses: actions/upload-artifact@v2
      with:
        name: appx
        path: |
          gmcl-electron-app/build/output/*.*
  build-appimage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: pnpm/action-setup@v2.0.1
      with:
        version: 6.24.4
    - name: Use Node.js 16
      uses: actions/setup-node@v2
      with:
        node-version: 16
        cache: 'pnpm'
    - name: Install
      run: pnpm install
    - name: Build
      run: |
        pnpm run --prefix gmcl-keystone-ui build
        pnpm run --prefix gmcl-electron-app build
      env:
        BUILD_NUMBER: ${{ env.GITHUB_RUN_NUMBER }}
        NODE_ENV: production
        BUILD_TARGET: appimage
    - name: Upload Build
      uses: actions/upload-artifact@v2
      with:
        name: appimage
        path: |
          gmcl-electron-app/build/output/*.*
  prepare-release:
    runs-on: ubuntu-latest
    needs: 
      - build
      - build-appx
      - build-appimage
    if: ${{ !startsWith(github.event.head_commit.message, 'chore(release)') }}
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0
    - uses: pnpm/action-setup@v2.0.1
      with:
        version: 6.24.4
    - name: Use Node.js 16
      uses: actions/setup-node@v2
      with:
        node-version: 16
    - name: Install
      run: |
        pnpm install
    - name: Update Lock File
      if: ${{ steps.version.outputs.release == 'true' }}
      run: pnpm i --lockfile-only
    - name: Create Pull Request
      if: ${{ steps.version.outputs.release == 'true' }}
      uses: peter-evans/create-pull-request@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore(release): version ${{ steps.version.outputs.version }}"
        title: Prepare Release ${{ steps.version.outputs.version }}
        body: ${{ steps.version.outputs.changelog }}
        reviewers: FOTONTV
        assignees: FOTONTV
        branch: prepare-release
  release:
    if: startsWith(github.event.head_commit.message, 'chore(release)')
    runs-on: ubuntu-latest
    needs:
      - build
      - build-appx
      - build-appimage
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive
    - uses: pnpm/action-setup@v2.0.1
      with:
        version: 6.24.4
    - name: Use Node.js 16
      uses: actions/setup-node@v2
      with:
        node-version: 16
        cache: 'pnpm'
    - name: Install
      run: |
        pnpm install --filter ./.github/actions
    - name: Download Build
      uses: actions/download-artifact@v2
      with:
        name: build
        path: build
    - name: Download Appx Build
      uses: actions/download-artifact@v2
      with:
        name: appx
        path: build
    - name: Download AppImage Build
      uses: actions/download-artifact@v2
      with:
        name: appimage
        path: build
    
